Index: app/src/main/java/edu/cnm/deepdive/myfunrun/controller/NavigationActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.cnm.deepdive.myfunrun.controller;\n\nimport android.os.Bundle;\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.navigation.NavController;\nimport androidx.navigation.Navigation;\nimport androidx.navigation.ui.AppBarConfiguration;\nimport androidx.navigation.ui.NavigationUI;\nimport edu.cnm.deepdive.myfunrun.R;\n\n/**\n * This class controls the navigation of the toolbar.\n */\npublic class NavigationActivity extends AppCompatActivity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_navigation);\n    BottomNavigationView navView = findViewById(R.id.nav_view);\n    // Passing each menu ID as a set of Ids because each\n    // menu should be considered as top level destinations.\n    AppBarConfiguration appBarConfiguration = new AppBarConfiguration.Builder(\n        R.id.navigation_home, R.id.navigation_races, R.id.navigation_history)\n        .build();\n    NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\n    NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);\n    NavigationUI.setupWithNavController(navView, navController);\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/cnm/deepdive/myfunrun/controller/NavigationActivity.java	(revision 6fac4fed6bf5fef7179603f6042dd5bb17d03b35)
+++ app/src/main/java/edu/cnm/deepdive/myfunrun/controller/NavigationActivity.java	(date 1596654927730)
@@ -8,12 +8,14 @@
 import androidx.navigation.ui.AppBarConfiguration;
 import androidx.navigation.ui.NavigationUI;
 import edu.cnm.deepdive.myfunrun.R;
+import edu.cnm.deepdive.myfunrun.service.GoogleSignInService;
 
 /**
  * This class controls the navigation of the toolbar.
  */
 public class NavigationActivity extends AppCompatActivity {
 
+  private GoogleSignInService signInService;
   @Override
   protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n          </set>\n        </option>\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 6fac4fed6bf5fef7179603f6042dd5bb17d03b35)
+++ .idea/gradle.xml	(date 1596654927738)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
Index: app/src/main/java/edu/cnm/deepdive/myfunrun/viewmodel/RaceViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.cnm.deepdive.myfunrun.viewmodel;\n\nimport android.app.Application;\nimport androidx.annotation.NonNull;\nimport androidx.lifecycle.AndroidViewModel;\nimport androidx.lifecycle.Lifecycle.Event;\nimport androidx.lifecycle.LifecycleObserver;\nimport androidx.lifecycle.LiveData;\nimport androidx.lifecycle.MutableLiveData;\nimport androidx.lifecycle.OnLifecycleEvent;\nimport androidx.lifecycle.ViewModel;\nimport com.google.android.gms.auth.api.signin.GoogleSignInAccount;\nimport edu.cnm.deepdive.myfunrun.model.entity.Race;\nimport edu.cnm.deepdive.myfunrun.model.pojo.RaceWithHistory;\nimport edu.cnm.deepdive.myfunrun.service.GoogleSignInService;\nimport edu.cnm.deepdive.myfunrun.service.RaceRepository;\nimport io.reactivex.disposables.CompositeDisposable;\nimport io.reactivex.disposables.Disposable;\nimport java.util.List;\n\n/**\n * The type Race view model.\n */\npublic class RaceViewModel extends AndroidViewModel implements LifecycleObserver {\n\n  private final RaceRepository raceRepository;\n  private final MutableLiveData<RaceWithHistory> race;\n  private final MutableLiveData<Throwable> throwable;\n  private final CompositeDisposable pending;\n  private final GoogleSignInService signInService;\n\n  /**\n   * Instantiates a new Race view model.\n   *\n   * @param application the application\n   */\n  public RaceViewModel(@NonNull Application application) {\n    super(application);\n    raceRepository = new RaceRepository(application);\n    race = new MutableLiveData<>();\n    throwable = new MutableLiveData<>();\n    pending = new CompositeDisposable();\n    signInService = GoogleSignInService.getInstance();\n    refreshRaces();\n  }\n\n  /**\n   * Gets race.\n   *\n   * @return the race\n   */\n  public LiveData<RaceWithHistory> getRace() {\n    return race;\n  }\n\n  /**\n   * Gets throwable.\n   *\n   * @return the throwable\n   */\n  public LiveData<Throwable> getThrowable() {\n    return throwable;\n  }\n\n  /**\n   * Gets races.\n   *\n   * @return the races\n   */\n  public LiveData<List<Race>> getRaces() {\n    throwable.setValue(null);\n    return raceRepository.getAll();\n  }\n\n  /**\n   * Set race id.\n   *\n   * @param id the id\n   */\n  public void setRaceId(long id){\n    throwable.setValue(null);\n    pending.add(\n        raceRepository.get(id)\n            .subscribe(\n                value -> this.race.postValue(value),\n                (throwable) -> this.throwable.postValue(throwable)\n            )\n    );\n  }\n\n  @OnLifecycleEvent(Event.ON_STOP)\n  private void clearPending(){\n    pending.clear();\n  }\n\n  /**\n   * Save.\n   *\n   * @param race the race\n   */\n  public void save(Race race) {\n    refreshAndExecute((account) ->\n        raceRepository.save(account.getIdToken(), race)\n            .subscribe(\n                () -> {},\n                (throwable) -> this.throwable.postValue(throwable)\n            )\n    );\n  }\n\n  /**\n   * Delete.\n   *\n   * @param race the race\n   */\n  public void delete (Race race) {\n    refreshAndExecute((account) ->\n        raceRepository.delete(account.getIdToken(), race)\n            .subscribe(\n                () -> {},\n                (throwable) -> this.throwable.postValue(throwable)\n            )\n    );\n  }\n  private void refreshRaces() {\n    refreshAndExecute((account) ->\n        raceRepository.refresh(account.getIdToken())\n            .subscribe(\n                () -> {},\n                (throwable) -> this.throwable.postValue(throwable)\n            )\n    );\n  }\n  private void refreshAndExecute(AuthenticatedTask task) {\n    throwable.setValue(null);\n    signInService.refresh()\n        .addOnSuccessListener((account) -> pending.add(task.execute(account)))\n        .addOnFailureListener(throwable::postValue);\n  }\n  public interface AuthenticatedTask {\n    Disposable execute(GoogleSignInAccount account);\n\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/cnm/deepdive/myfunrun/viewmodel/RaceViewModel.java	(revision 6fac4fed6bf5fef7179603f6042dd5bb17d03b35)
+++ app/src/main/java/edu/cnm/deepdive/myfunrun/viewmodel/RaceViewModel.java	(date 1596654927746)
@@ -132,7 +132,7 @@
     );
   }
   private void refreshAndExecute(AuthenticatedTask task) {
-    throwable.setValue(null);
+    throwable.setValue(null);m
     signInService.refresh()
         .addOnSuccessListener((account) -> pending.add(task.execute(account)))
         .addOnFailureListener(throwable::postValue);
